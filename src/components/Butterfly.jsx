/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect,useState } from "react";
import { useGLTF } from "@react-three/drei";
import butterflyScene from "../assets/animated_butterfly.glb"
import { useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useTimer } from "use-timer";

export default function Butterfly(props) {
 
  const group = useRef();
  const [idle,setIdle]=useState(false)
  const { scene, animations } = useGLTF(butterflyScene);
  const { actions } = useAnimations(animations, group);
  const { time, start, pause, reset, status } = useTimer();

  useEffect(() => {
    actions.Flying.play();
  });

  useFrame(({clock,camera},delta) => {
     group.current.rotation.z=50
    //  let idle = false;
     let isFlying = false;
    if(group.current.position.y>=0 && group.current.position.y<=3){
      group.current.position.x -= 0.5 * delta ;
      group.current.position.z += 0.5 * delta ;
      group.current.position.y -= 0.5 * delta ;
    }

    // console.log(clock,camera,"hi")

    // setTimeout(()=>{
    //   if (!isFlying) { // Start flying after 3 seconds of being idle
    //     actions.Flying.play();
    //     //actions.Idle.stop();
    //     isFlying = true;
    // }
    // },[3000])
   if(group.current.position.y<=0 && !idle){
    //actions.Flying.stop();
    actions.Idle.play();
    start()
    setIdle(true)
   }

   if(time>3 && idle){
    actions.Flying.play();
    stop()
    //actions.Idle.stop();
    // group.current.rotation.z = 70 * delta;
    group.current.position.x -= 0.2 * delta;
    group.current.position.y -= 0.1 * delta;
    if( group.current.position.y<2 && idle){
      actions.Idle.play()
     }
   }



//    if (idle) {
//     actions.Flying.play();
//     // Move in positive z direction
//     group.current.position.z -= 0.01;

//     // Check if it reached a certain point to start the U-turn
//     if (group.current.position.z <= -3) { // Adjust the condition based on your scene
//         // Take a U-turn towards the screen
//         group.current.position.y += 0.01;
//         group.current.position.x -= 0.01;
//     }

//     // If it completes the U-turn and reaches a certain position, stop flying
//     // if (group.current.position.y >= 2 && group.current.position.x <= -2) {
//     //     actions.Flying.stop();
//     //     isFlying = false;
//     //     idleTimer = 0; // Reset idle timer
//     //     actions.Idle.play();
//     // }
// }
    // else if(group.current.position.x>=1 && group.current.position.x<=2){
    //   console.log('sec')
    //   group.current.position.y += 0.01 ;
    //   group.current.position.z -= 0.01;
    //   group.current.position.x += 0.01;
    // }
    // else if(group.current.position.z>=-1 && group.current.position.z<=1){
    //   console.log('third')
    //   group.current.position.y += 0.01 ;
    //   group.current.position.x -= 0.01;
    //   group.current.position.z -= 0.01;
    // }
    // else{
    //   console.log('fourth')
    //   group.current.position.y += 0.01 ;
    //   group.current.position.x += 0.01;
    //   group.current.position.z -= 0.01 ;
    // }
//     if(group.current.rotation.x===camera.position.y+5){
//       group.current.rotation.y=Math.PI
//     }
//    console.log(group.current.position.x)
   
// if(group.current.position.x>3){
//   console.log('come')
//   group.current.position.y-=0.01
// }
//     if(group.current.position.y>=2){
//       group.current.position.x += 0.01 ;
//       group.current.position.z += 0.01;
//     }
//     else if(group.current.position.z>=0.04){
//       group.current.position.z -= 0.01;
//       group.current.position.x -= 0.01 ;

//     }
  });

  return (
    // <group ref={group} {...props} dispose={null}>
    //   <group rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
    //     <primitive object={nodes.mixamorigHips} />
     
    //   </group>
    // </group>
    <mesh ref={group} position={[4,3,-2]} {...props}>
      <primitive object={scene} transparent opacity={0.5}/>
    </mesh>
  );
}

useGLTF.preload("/kick.glb");
